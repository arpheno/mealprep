"""
Django settings for mealprep_project project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import environ # Import django-environ

# Initialize environment variables
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR should point to the directory containing manage.py (i.e., the project root)
BASE_DIR = Path(__file__).resolve().parent.parent.parent # Adjusted to point to project root

# Take environment variables from .env file
# This will look for a .env file in the BASE_DIR (project root)
SERVICE_ENV_PATH = BASE_DIR / '.env'
if SERVICE_ENV_PATH.exists():
    environ.Env.read_env(SERVICE_ENV_PATH)
else:
    print(f"Warning: .env file not found at {SERVICE_ENV_PATH}. Using defaults or system env vars.")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-a-default-secret-key-for-dev')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG') # Will cast to bool and default to False if not set

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])

# CSRF Protection
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[
    'http://localhost:5001', 
    'http://127.0.0.1:5001',
    'http://localhost:8080', # Added for Vue frontend
    'http://127.0.0.1:8080'  # Added for Vue frontend
])
# If your docker-compose maps to a different host port, or you access via another name, add it here.


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # Django REST Framework
    'corsheaders',      # Add this for CORS
    'api',             # Our new api app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Add this BEFORE CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mealprep_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Add a project-level templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mealprep_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

import os
import sys

# Check if running with PYTHONPATH=src (testing environment)
if 'pytest' in sys.modules:
    # Use SQLite for tests
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'test_db.sqlite3',
        }
    }
else:
    # Use configured database for normal operation
    DATABASES = {
        # read os.environ['DATABASE_URL'] and raises
        # ImproperlyConfigured error if not found
        #
        # The db() method is an alias for db_url().
        'default': env.db_url(
            'DATABASE_URL',
            default=f'sqlite:///{BASE_DIR / "db.sqlite3"}'
        )
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# STATIC_ROOT is where collectstatic will place files for production.
# It should be an absolute path outside of your main app code for clarity in production.
STATIC_ROOT = BASE_DIR / 'staticfiles' # For collectstatic in production (PROJECT_ROOT/staticfiles)
STATICFILES_DIRS = [
    BASE_DIR / "static", # Points to PROJECT_ROOT/static
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# CORS settings
# For development, you might allow all origins or specify your frontend's origin.
# In production, you should restrict this to your actual frontend domain.
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[
    "http://localhost:8080", # Vue frontend
    "http://127.0.0.1:8080", # Vue frontend
])
# If you want to allow all origins for local development (less secure, but can be easier):
# CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS', default=DEBUG) # Allow all if DEBUG is True

# You can also use CORS_ALLOWED_ORIGIN_REGEXES for more complex patterns.
# By default, django-cors-headers allows common HTTP methods (GET, POST, PUT, PATCH, DELETE, OPTIONS).
# If you need custom headers to be allowed, you can configure CORS_ALLOW_HEADERS.
