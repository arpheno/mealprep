# Generated by Django 4.2.21 on 2025-05-13 20:05

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g., Chicken Breast, boneless, skinless, raw. Will be populated from FDC description.",
                        max_length=255,
                    ),
                ),
                (
                    "fdc_id",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="FoodData Central Food ID for this ingredient",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "food_class",
                    models.CharField(
                        blank=True,
                        help_text="From FDC foodClass e.g., FinalFood",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PRO_ANIMAL", "Animal Protein"),
                            ("PRO_PLANT", "Plant Protein"),
                            ("GRAIN", "Grain/Cereal"),
                            ("LEGUME", "Legume"),
                            ("VEG_LEAFY", "Leafy Vegetable"),
                            ("VEG_ROOT", "Root Vegetable"),
                            ("VEG_FRUIT", "Fruiting Vegetable"),
                            ("FRUIT", "Fruit"),
                            ("NUT_SEED", "Nut/Seed"),
                            ("OIL_FAT", "Oil/Fat"),
                            ("DAIRY", "Dairy"),
                            ("DAIRY_ALT", "Dairy Alternative"),
                            ("SPICE_HERB", "Spice/Herb"),
                            ("CONDIMENT", "Condiment/Sauce"),
                            ("BEVERAGE", "Beverage"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "base_unit_for_nutrition",
                    models.CharField(
                        default="g",
                        help_text="Nutritional info is per 100 of this unit (e.g., g, ml)",
                        max_length=10,
                    ),
                ),
                (
                    "common_purchase_unit",
                    models.CharField(
                        blank=True,
                        help_text="e.g., piece, can, bunch",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "purchase_unit_to_base_unit_conversion",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="e.g., Cooked yield is ~70% of raw weight",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="IngredientUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.FloatField(
                        help_text="Amount of the ingredient",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        help_text="Unit for the quantity (e.g., g, kg, ml, piece, cup)",
                        max_length=50,
                    ),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.ingredient"
                    ),
                ),
            ],
            options={
                "ordering": ["meal_component__name", "ingredient__name"],
            },
        ),
        migrations.CreateModel(
            name="MealComponent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "category_tag",
                    models.CharField(
                        blank=True,
                        help_text="e.g., Protein, Carb, Snack",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("description_recipe", models.TextField(blank=True, null=True)),
                (
                    "ingredients",
                    models.ManyToManyField(
                        related_name="meal_components",
                        through="api.IngredientUsage",
                        to="api.ingredient",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Nutrient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g., Calories, Protein, Vitamin C, Iron",
                        max_length=100,
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        help_text="e.g., kcal, g, mg, mcg, IU", max_length=20
                    ),
                ),
                (
                    "fdc_nutrient_id",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="FoodData Central Nutrient ID (nutrient.id from FDC data)",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "fdc_nutrient_number",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="FoodData Central Nutrient Number (nutrient.number from FDC data)",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("MACRO", "Macronutrient"),
                            ("VITAMIN", "Vitamin"),
                            ("MINERAL", "Mineral"),
                            ("GENERAL", "General"),
                        ],
                        default="GENERAL",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "default_rda_female",
                    models.FloatField(
                        blank=True,
                        help_text="General RDA for adult females in nutrient unit",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "default_rda_male",
                    models.FloatField(
                        blank=True,
                        help_text="General RDA for adult males in nutrient unit",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "upper_limit",
                    models.FloatField(
                        blank=True,
                        help_text="Tolerable Upper Intake Level in nutrient unit",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("is_essential", models.BooleanField(default=False)),
                (
                    "source_notes",
                    models.TextField(
                        blank=True, help_text="e.g., Source of RDA data", null=True
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PersonProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for the profile", max_length=100
                    ),
                ),
                ("age_years", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MALE", "Male"),
                            ("FEMALE", "Female"),
                            ("NO_SAY", "Prefer not to say"),
                            ("OTHER", "Other"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "weight_kg",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "height_cm",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "activity_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SEDENTARY", "Sedentary (little or no exercise)"),
                            (
                                "LIGHT",
                                "Lightly active (light exercise/sports 1-3 days/week)",
                            ),
                            (
                                "MODERATE",
                                "Moderately active (moderate exercise/sports 3-5 days/week)",
                            ),
                            (
                                "ACTIVE",
                                "Very active (hard exercise/sports 6-7 days a week)",
                            ),
                            (
                                "EXTRA_ACTIVE",
                                "Extra active (very hard exercise/sports & physical job)",
                            ),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "target_calories_override",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Manually set daily calorie goal, overrides calculation if set",
                        null=True,
                    ),
                ),
                (
                    "protein_target_strategy",
                    models.CharField(
                        choices=[
                            ("RDA", "Standard RDA (e.g., 0.8g/kg)"),
                            ("MOD_1_2", "Moderate (1.2g/kg)"),
                            ("MOD_1_5", "Moderate (1.5g/kg)"),
                            ("HIGH_1_8", "High (1.8g/kg)"),
                            ("HIGH_2_0", "High (2.0g/kg)"),
                            ("HIGH_2_2", "High (2.2g/kg)"),
                            ("CUSTOM", "Custom Grams"),
                        ],
                        default="RDA",
                        max_length=20,
                    ),
                ),
                (
                    "custom_protein_target_g",
                    models.FloatField(
                        blank=True,
                        help_text="Used if strategy is Custom Grams",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MealPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "duration_days",
                    models.PositiveIntegerField(
                        default=7,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "servings_per_day_per_person",
                    models.PositiveIntegerField(
                        default=2,
                        help_text="e.g., 2 meal boxes per person per day",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                ("creation_date", models.DateTimeField(auto_now_add=True)),
                ("last_modified_date", models.DateTimeField(auto_now=True)),
                (
                    "meal_components",
                    models.ManyToManyField(
                        blank=True, related_name="meal_plans", to="api.mealcomponent"
                    ),
                ),
                (
                    "target_people_profiles",
                    models.ManyToManyField(
                        blank=True, related_name="meal_plans", to="api.personprofile"
                    ),
                ),
            ],
            options={
                "ordering": ["-creation_date", "name"],
            },
        ),
        migrations.AddField(
            model_name="ingredientusage",
            name="meal_component",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.mealcomponent"
            ),
        ),
        migrations.CreateModel(
            name="IngredientNutrientLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount_per_100_units",
                    models.FloatField(
                        help_text="Amount of nutrient per 100 units of ingredient base unit",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.ingredient"
                    ),
                ),
                (
                    "nutrient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.nutrient"
                    ),
                ),
            ],
            options={
                "ordering": ["ingredient__name", "nutrient__name"],
                "unique_together": {("ingredient", "nutrient")},
            },
        ),
        migrations.AddField(
            model_name="ingredient",
            name="nutrients",
            field=models.ManyToManyField(
                related_name="ingredients",
                through="api.IngredientNutrientLink",
                to="api.nutrient",
            ),
        ),
    ]
